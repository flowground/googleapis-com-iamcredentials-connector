{
    "openapi": "3.0.0",
    "servers": [
        {
            "url": "https://iamcredentials.googleapis.com/"
        }
    ],
    "info": {
        "contact": {
            "name": "Google",
            "url": "https://google.com"
        },
        "description": "Creates short-lived, limited-privilege credentials for IAM service accounts.",
        "title": "IAM Service Account Credentials",
        "version": "v1",
        "x-apiClientRegistration": {
            "url": "https://console.developers.google.com"
        },
        "x-logo": {
            "url": "https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png"
        },
        "x-origin": [
            {
                "converter": {
                    "url": "https://github.com/lucybot/api-spec-converter",
                    "version": "2.7.31"
                },
                "format": "google",
                "url": "https://iamcredentials.googleapis.com/$discovery/rest?version=v1",
                "version": "v1"
            }
        ],
        "x-preferred": true,
        "x-providerName": "googleapis.com",
        "x-serviceName": "iamcredentials"
    },
    "externalDocs": {
        "url": "https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials"
    },
    "tags": [
        {
            "name": "projects"
        }
    ],
    "paths": {
        "/v1/{name}:generateAccessToken": {
            "parameters": [
                {
                    "description": "V1 error format.",
                    "in": "query",
                    "name": "$.xgafv",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "1",
                            "2"
                        ]
                    }
                },
                {
                    "description": "OAuth access token.",
                    "in": "query",
                    "name": "access_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Data format for response.",
                    "in": "query",
                    "name": "alt",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "json",
                            "media",
                            "proto"
                        ],
                        "default": "json"
                    }
                },
                {
                    "description": "JSONP",
                    "in": "query",
                    "name": "callback",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Selector specifying which fields to include in a partial response.",
                    "in": "query",
                    "name": "fields",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                    "in": "query",
                    "name": "key",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "OAuth 2.0 token for the current user.",
                    "in": "query",
                    "name": "oauth_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Returns response with indentations and line breaks.",
                    "in": "query",
                    "name": "prettyPrint",
                    "schema": {
                        "type": "boolean",
                        "default": true
                    }
                },
                {
                    "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                    "in": "query",
                    "name": "quotaUser",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                    "in": "query",
                    "name": "uploadType",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                    "in": "query",
                    "name": "upload_protocol",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Generates an OAuth 2.0 access token for a service account.",
                "operationId": "iamcredentials.projects.serviceAccounts.generateAccessToken",
                "parameters": [
                    {
                        "description": "The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "x-reservedExpansion": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "accessToken": {
                                            "description": "The OAuth 2.0 access token.",
                                            "type": "string"
                                        },
                                        "expireTime": {
                                            "description": "Token expiration time.\nThe expiration time is always set.",
                                            "format": "google-datetime",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "https://www.googleapis.com/auth/cloud-platform"
                        ]
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "delegates": {
                                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "lifetime": {
                                        "description": "The desired lifetime duration of the access token in seconds.\nMust be set to a value less than or equal to 3600 (1 hour). If a value is\nnot specified, the token's lifetime will be set to a default value of one\nhour.",
                                        "format": "google-duration",
                                        "type": "string"
                                    },
                                    "scope": {
                                        "description": "Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/v1/{name}:generateIdToken": {
            "parameters": [
                {
                    "description": "V1 error format.",
                    "in": "query",
                    "name": "$.xgafv",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "1",
                            "2"
                        ]
                    }
                },
                {
                    "description": "OAuth access token.",
                    "in": "query",
                    "name": "access_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Data format for response.",
                    "in": "query",
                    "name": "alt",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "json",
                            "media",
                            "proto"
                        ],
                        "default": "json"
                    }
                },
                {
                    "description": "JSONP",
                    "in": "query",
                    "name": "callback",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Selector specifying which fields to include in a partial response.",
                    "in": "query",
                    "name": "fields",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                    "in": "query",
                    "name": "key",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "OAuth 2.0 token for the current user.",
                    "in": "query",
                    "name": "oauth_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Returns response with indentations and line breaks.",
                    "in": "query",
                    "name": "prettyPrint",
                    "schema": {
                        "type": "boolean",
                        "default": true
                    }
                },
                {
                    "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                    "in": "query",
                    "name": "quotaUser",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                    "in": "query",
                    "name": "uploadType",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                    "in": "query",
                    "name": "upload_protocol",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Generates an OpenID Connect ID token for a service account.",
                "operationId": "iamcredentials.projects.serviceAccounts.generateIdToken",
                "parameters": [
                    {
                        "description": "The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "x-reservedExpansion": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "token": {
                                            "description": "The OpenId Connect ID token.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "https://www.googleapis.com/auth/cloud-platform"
                        ]
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "audience": {
                                        "description": "The audience for the token, such as the API or account that this token\ngrants access to.",
                                        "type": "string"
                                    },
                                    "delegates": {
                                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "includeEmail": {
                                        "description": "Include the service account email in the token. If set to `true`, the\ntoken will contain `email` and `email_verified` claims.",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/v1/{name}:generateIdentityBindingAccessToken": {
            "parameters": [
                {
                    "description": "V1 error format.",
                    "in": "query",
                    "name": "$.xgafv",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "1",
                            "2"
                        ]
                    }
                },
                {
                    "description": "OAuth access token.",
                    "in": "query",
                    "name": "access_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Data format for response.",
                    "in": "query",
                    "name": "alt",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "json",
                            "media",
                            "proto"
                        ],
                        "default": "json"
                    }
                },
                {
                    "description": "JSONP",
                    "in": "query",
                    "name": "callback",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Selector specifying which fields to include in a partial response.",
                    "in": "query",
                    "name": "fields",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                    "in": "query",
                    "name": "key",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "OAuth 2.0 token for the current user.",
                    "in": "query",
                    "name": "oauth_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Returns response with indentations and line breaks.",
                    "in": "query",
                    "name": "prettyPrint",
                    "schema": {
                        "type": "boolean",
                        "default": true
                    }
                },
                {
                    "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                    "in": "query",
                    "name": "quotaUser",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                    "in": "query",
                    "name": "uploadType",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                    "in": "query",
                    "name": "upload_protocol",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "",
                "operationId": "iamcredentials.projects.serviceAccounts.generateIdentityBindingAccessToken",
                "parameters": [
                    {
                        "description": "The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "x-reservedExpansion": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "accessToken": {
                                            "description": "The OAuth 2.0 access token.",
                                            "type": "string"
                                        },
                                        "expireTime": {
                                            "description": "Token expiration time.\nThe expiration time is always set.",
                                            "format": "google-datetime",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "jwt": {
                                        "description": "Required. Input token.\nMust be in JWT format according to\nRFC7523 (https://tools.ietf.org/html/rfc7523)\nand must have 'kid' field in the header.\nSupported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).\nMandatory payload fields (along the lines of RFC 7523, section 3):\n- iss: issuer of the token. Must provide a discovery document at\n       $iss/.well-known/openid-configuration . The document needs to be\n       formatted according to section 4.2 of the OpenID Connect Discovery\n       1.0 specification.\n- iat: Issue time in seconds since epoch. Must be in the past.\n- exp: Expiration time in seconds since epoch. Must be less than 48 hours\n       after iat. We recommend to create tokens that last shorter than 6\n       hours to improve security unless business reasons mandate longer\n       expiration times. Shorter token lifetimes are generally more secure\n       since tokens that have been exfiltrated by attackers can be used for\n       a shorter time. you can configure the maximum lifetime of the\n       incoming token in the configuration of the mapper.\n       The resulting Google token will expire within an hour or at \"exp\",\n       whichever is earlier.\n- sub: JWT subject, identity asserted in the JWT.\n- aud: Configured in the mapper policy. By default the service account\n       email.\n\nClaims from the incoming token can be transferred into the output token\naccoding to the mapper configuration. The outgoing claim size is limited.\nOutgoing claims size must be less than 4kB serialized as JSON without\nwhitespace.\n\nExample header:\n{\n  \"alg\": \"RS256\",\n  \"kid\": \"92a4265e14ab04d4d228a48d10d4ca31610936f8\"\n}\nExample payload:\n{\n  \"iss\": \"https://accounts.google.com\",\n  \"iat\": 1517963104,\n  \"exp\": 1517966704,\n  \"aud\":\n  \"https://iamcredentials.googleapis.com/google.iam.credentials.v1.CloudGaia\",\n  \"sub\": \"113475438248934895348\",\n  \"my_claims\": {\n    \"additional_claim\": \"value\"\n  }\n}",
                                        "type": "string"
                                    },
                                    "scope": {
                                        "description": "Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/v1/{name}:signBlob": {
            "parameters": [
                {
                    "description": "V1 error format.",
                    "in": "query",
                    "name": "$.xgafv",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "1",
                            "2"
                        ]
                    }
                },
                {
                    "description": "OAuth access token.",
                    "in": "query",
                    "name": "access_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Data format for response.",
                    "in": "query",
                    "name": "alt",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "json",
                            "media",
                            "proto"
                        ],
                        "default": "json"
                    }
                },
                {
                    "description": "JSONP",
                    "in": "query",
                    "name": "callback",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Selector specifying which fields to include in a partial response.",
                    "in": "query",
                    "name": "fields",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                    "in": "query",
                    "name": "key",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "OAuth 2.0 token for the current user.",
                    "in": "query",
                    "name": "oauth_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Returns response with indentations and line breaks.",
                    "in": "query",
                    "name": "prettyPrint",
                    "schema": {
                        "type": "boolean",
                        "default": true
                    }
                },
                {
                    "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                    "in": "query",
                    "name": "quotaUser",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                    "in": "query",
                    "name": "uploadType",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                    "in": "query",
                    "name": "upload_protocol",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Signs a blob using a service account's system-managed private key.",
                "operationId": "iamcredentials.projects.serviceAccounts.signBlob",
                "parameters": [
                    {
                        "description": "The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "x-reservedExpansion": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "keyId": {
                                            "description": "The ID of the key used to sign the blob.",
                                            "type": "string"
                                        },
                                        "signedBlob": {
                                            "description": "The signed blob.",
                                            "format": "byte",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "https://www.googleapis.com/auth/cloud-platform"
                        ]
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "delegates": {
                                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "payload": {
                                        "description": "The bytes to sign.",
                                        "format": "byte",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/v1/{name}:signJwt": {
            "parameters": [
                {
                    "description": "V1 error format.",
                    "in": "query",
                    "name": "$.xgafv",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "1",
                            "2"
                        ]
                    }
                },
                {
                    "description": "OAuth access token.",
                    "in": "query",
                    "name": "access_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Data format for response.",
                    "in": "query",
                    "name": "alt",
                    "schema": {
                        "type": "string",
                        "enum": [
                            "json",
                            "media",
                            "proto"
                        ],
                        "default": "json"
                    }
                },
                {
                    "description": "JSONP",
                    "in": "query",
                    "name": "callback",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Selector specifying which fields to include in a partial response.",
                    "in": "query",
                    "name": "fields",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                    "in": "query",
                    "name": "key",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "OAuth 2.0 token for the current user.",
                    "in": "query",
                    "name": "oauth_token",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Returns response with indentations and line breaks.",
                    "in": "query",
                    "name": "prettyPrint",
                    "schema": {
                        "type": "boolean",
                        "default": true
                    }
                },
                {
                    "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                    "in": "query",
                    "name": "quotaUser",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                    "in": "query",
                    "name": "uploadType",
                    "schema": {
                        "type": "string"
                    }
                },
                {
                    "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                    "in": "query",
                    "name": "upload_protocol",
                    "schema": {
                        "type": "string"
                    }
                }
            ],
            "post": {
                "description": "Signs a JWT using a service account's system-managed private key.",
                "operationId": "iamcredentials.projects.serviceAccounts.signJwt",
                "parameters": [
                    {
                        "description": "The resource name of the service account for which the credentials\nare requested, in the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "in": "path",
                        "name": "name",
                        "required": true,
                        "x-reservedExpansion": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "keyId": {
                                            "description": "The ID of the key used to sign the JWT.",
                                            "type": "string"
                                        },
                                        "signedJwt": {
                                            "description": "The signed JWT.",
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Oauth2": [
                            "https://www.googleapis.com/auth/cloud-platform"
                        ]
                    }
                ],
                "tags": [
                    "projects"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "delegates": {
                                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "payload": {
                                        "description": "The JWT payload to sign: a JSON object that contains a JWT Claims Set.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "GenerateAccessTokenRequest": {
                "properties": {
                    "delegates": {
                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "lifetime": {
                        "description": "The desired lifetime duration of the access token in seconds.\nMust be set to a value less than or equal to 3600 (1 hour). If a value is\nnot specified, the token's lifetime will be set to a default value of one\nhour.",
                        "format": "google-duration",
                        "type": "string"
                    },
                    "scope": {
                        "description": "Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GenerateAccessTokenResponse": {
                "properties": {
                    "accessToken": {
                        "description": "The OAuth 2.0 access token.",
                        "type": "string"
                    },
                    "expireTime": {
                        "description": "Token expiration time.\nThe expiration time is always set.",
                        "format": "google-datetime",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GenerateIdTokenRequest": {
                "properties": {
                    "audience": {
                        "description": "The audience for the token, such as the API or account that this token\ngrants access to.",
                        "type": "string"
                    },
                    "delegates": {
                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "includeEmail": {
                        "description": "Include the service account email in the token. If set to `true`, the\ntoken will contain `email` and `email_verified` claims.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "GenerateIdTokenResponse": {
                "properties": {
                    "token": {
                        "description": "The OpenId Connect ID token.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GenerateIdentityBindingAccessTokenRequest": {
                "properties": {
                    "jwt": {
                        "description": "Required. Input token.\nMust be in JWT format according to\nRFC7523 (https://tools.ietf.org/html/rfc7523)\nand must have 'kid' field in the header.\nSupported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).\nMandatory payload fields (along the lines of RFC 7523, section 3):\n- iss: issuer of the token. Must provide a discovery document at\n       $iss/.well-known/openid-configuration . The document needs to be\n       formatted according to section 4.2 of the OpenID Connect Discovery\n       1.0 specification.\n- iat: Issue time in seconds since epoch. Must be in the past.\n- exp: Expiration time in seconds since epoch. Must be less than 48 hours\n       after iat. We recommend to create tokens that last shorter than 6\n       hours to improve security unless business reasons mandate longer\n       expiration times. Shorter token lifetimes are generally more secure\n       since tokens that have been exfiltrated by attackers can be used for\n       a shorter time. you can configure the maximum lifetime of the\n       incoming token in the configuration of the mapper.\n       The resulting Google token will expire within an hour or at \"exp\",\n       whichever is earlier.\n- sub: JWT subject, identity asserted in the JWT.\n- aud: Configured in the mapper policy. By default the service account\n       email.\n\nClaims from the incoming token can be transferred into the output token\naccoding to the mapper configuration. The outgoing claim size is limited.\nOutgoing claims size must be less than 4kB serialized as JSON without\nwhitespace.\n\nExample header:\n{\n  \"alg\": \"RS256\",\n  \"kid\": \"92a4265e14ab04d4d228a48d10d4ca31610936f8\"\n}\nExample payload:\n{\n  \"iss\": \"https://accounts.google.com\",\n  \"iat\": 1517963104,\n  \"exp\": 1517966704,\n  \"aud\":\n  \"https://iamcredentials.googleapis.com/google.iam.credentials.v1.CloudGaia\",\n  \"sub\": \"113475438248934895348\",\n  \"my_claims\": {\n    \"additional_claim\": \"value\"\n  }\n}",
                        "type": "string"
                    },
                    "scope": {
                        "description": "Code to identify the scopes to be included in the OAuth 2.0 access token.\nSee https://developers.google.com/identity/protocols/googlescopes for more\ninformation.\nAt least one value required.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GenerateIdentityBindingAccessTokenResponse": {
                "properties": {
                    "accessToken": {
                        "description": "The OAuth 2.0 access token.",
                        "type": "string"
                    },
                    "expireTime": {
                        "description": "Token expiration time.\nThe expiration time is always set.",
                        "format": "google-datetime",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignBlobRequest": {
                "properties": {
                    "delegates": {
                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "payload": {
                        "description": "The bytes to sign.",
                        "format": "byte",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignBlobResponse": {
                "properties": {
                    "keyId": {
                        "description": "The ID of the key used to sign the blob.",
                        "type": "string"
                    },
                    "signedBlob": {
                        "description": "The signed blob.",
                        "format": "byte",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignJwtRequest": {
                "properties": {
                    "delegates": {
                        "description": "The sequence of service accounts in a delegation chain. Each service\naccount must be granted the `roles/iam.serviceAccountTokenCreator` role\non its next service account in the chain. The last service account in the\nchain must be granted the `roles/iam.serviceAccountTokenCreator` role\non the service account that is specified in the `name` field of the\nrequest.\n\nThe delegates must have the following format:\n`projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard\ncharacter is required; replacing it with a project ID is invalid.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "payload": {
                        "description": "The JWT payload to sign: a JSON object that contains a JWT Claims Set.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignJwtResponse": {
                "properties": {
                    "keyId": {
                        "description": "The ID of the key used to sign the JWT.",
                        "type": "string"
                    },
                    "signedJwt": {
                        "description": "The signed JWT.",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "access_token": {
                "description": "OAuth access token.",
                "in": "query",
                "name": "access_token",
                "schema": {
                    "type": "string"
                }
            },
            "alt": {
                "description": "Data format for response.",
                "in": "query",
                "name": "alt",
                "schema": {
                    "type": "string",
                    "enum": [
                        "json",
                        "media",
                        "proto"
                    ],
                    "default": "json"
                }
            },
            "callback": {
                "description": "JSONP",
                "in": "query",
                "name": "callback",
                "schema": {
                    "type": "string"
                }
            },
            "fields": {
                "description": "Selector specifying which fields to include in a partial response.",
                "in": "query",
                "name": "fields",
                "schema": {
                    "type": "string"
                }
            },
            "key": {
                "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
                "in": "query",
                "name": "key",
                "schema": {
                    "type": "string"
                }
            },
            "oauth_token": {
                "description": "OAuth 2.0 token for the current user.",
                "in": "query",
                "name": "oauth_token",
                "schema": {
                    "type": "string"
                }
            },
            "prettyPrint": {
                "description": "Returns response with indentations and line breaks.",
                "in": "query",
                "name": "prettyPrint",
                "schema": {
                    "type": "boolean",
                    "default": true
                }
            },
            "quotaUser": {
                "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
                "in": "query",
                "name": "quotaUser",
                "schema": {
                    "type": "string"
                }
            },
            "uploadType": {
                "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
                "in": "query",
                "name": "uploadType",
                "schema": {
                    "type": "string"
                }
            },
            "upload_protocol": {
                "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
                "in": "query",
                "name": "upload_protocol",
                "schema": {
                    "type": "string"
                }
            },
            "_.xgafv": {
                "description": "V1 error format.",
                "in": "query",
                "name": "$.xgafv",
                "schema": {
                    "type": "string",
                    "enum": [
                        "1",
                        "2"
                    ]
                }
            }
        },
        "securitySchemes": {
            "Oauth2": {
                "description": "Oauth 2.0 authentication",
                "type": "oauth2",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
                        "scopes": {
                            "https://www.googleapis.com/auth/cloud-platform": "View and manage your data across Google Cloud Platform services"
                        },
                        "tokenUrl": "https://www.googleapis.com/oauth2/v4/token"
                    }
                }
            }
        }
    }
}